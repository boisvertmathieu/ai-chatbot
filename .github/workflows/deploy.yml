name: Build and Deploy AI Chatbot

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourPassword123!
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourPassword123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test
        env:
          AZURE_SQL_URL: jdbc:sqlserver://localhost:1433;databaseName=testdb;encrypt=false;trustServerCertificate=true
          AZURE_SQL_USERNAME: sa
          AZURE_SQL_PASSWORD: YourPassword123!

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: build/test-results/test/*.xml
          reporter: java-junit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: build/reports/jacoco/test/jacocoTestReport.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Instances (Staging)
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.AZURE_RG }}
          dns-name-label: ai-chatbot-staging-${{ github.sha }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          name: ai-chatbot-staging
          location: "West Europe"
          restart-policy: Always
          environment-variables: |
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
            AZURE_SEARCH_API_KEY=${{ secrets.AZURE_SEARCH_API_KEY }}
            AZURE_SEARCH_ENDPOINT=${{ secrets.AZURE_SEARCH_ENDPOINT }}
            AZURE_SQL_URL=${{ secrets.AZURE_SQL_URL_STAGING }}
            AZURE_SQL_USERNAME=${{ secrets.AZURE_SQL_USERNAME }}
            AZURE_SQL_PASSWORD=${{ secrets.AZURE_SQL_PASSWORD }}
            TEAMS_MODE=test
            TEAMS_TEST_WEBHOOK=${{ secrets.TEAMS_TEST_WEBHOOK }}

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Configure App Service settings
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          app-settings-json: |
            [
              {
                "name": "AZURE_OPENAI_API_KEY",
                "value": "${{ secrets.AZURE_OPENAI_API_KEY }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_OPENAI_ENDPOINT", 
                "value": "${{ secrets.AZURE_OPENAI_ENDPOINT }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_SEARCH_API_KEY",
                "value": "${{ secrets.AZURE_SEARCH_API_KEY }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "${{ secrets.AZURE_SEARCH_ENDPOINT }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_SQL_URL",
                "value": "${{ secrets.AZURE_SQL_URL_PROD }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_SQL_USERNAME",
                "value": "${{ secrets.AZURE_SQL_USERNAME }}",
                "slotSetting": false
              },
              {
                "name": "AZURE_SQL_PASSWORD",
                "value": "${{ secrets.AZURE_SQL_PASSWORD }}",
                "slotSetting": false
              },
              {
                "name": "TEAMS_MODE",
                "value": "production",
                "slotSetting": false
              },
              {
                "name": "TEAMS_PROD_WEBHOOK",
                "value": "${{ secrets.TEAMS_PROD_WEBHOOK }}",
                "slotSetting": false
              }
            ]

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Teams on success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_DEPLOYMENT_WEBHOOK }}
          notification-summary: "✅ Déploiement réussi"
          notification-color: 28a745
          timezone: Europe/Paris

      - name: Notify Teams on failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_DEPLOYMENT_WEBHOOK }}
          notification-summary: "❌ Échec du déploiement"
          notification-color: dc3545
          timezone: Europe/Paris
